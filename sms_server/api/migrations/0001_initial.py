# Generated by Django 4.2.4 on 2024-07-14 19:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('name_slug', models.CharField(max_length=128, unique=True)),
                ('bio', models.TextField(blank=True, max_length=256, null=True)),
                ('artist_image_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('artist_image', models.ImageField(blank=True, null=True, upload_to='event_images')),
            ],
        ),
        migrations.CreateModel(
            name='CarpenterRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='IngestionRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('name_lower', models.CharField(max_length=128, unique=True)),
                ('latitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('longitude', models.DecimalField(decimal_places=5, max_digits=8)),
                ('address', models.CharField(max_length=256)),
                ('postal_code', models.CharField(max_length=8)),
                ('city', models.CharField(max_length=64)),
                ('venue_url', models.CharField(blank=True, max_length=256, null=True)),
                ('venue_image_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('venue_image', models.ImageField(blank=True, null=True, upload_to='venue_images')),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('neighborhood', models.CharField(blank=True, choices=[('Ballard', 'Ballard'), ('Belltown', 'Belltown'), ('Capitol Hill', 'Capitol Hill'), ('Downtown', 'Downtown'), ('Fremont', 'Fremont'), ('Greenlake', 'Greenlake'), ('Magnolia', 'Magnolia'), ('Phinney Ridge', 'Phinney Ridge'), ('Queen Anne', 'Queen Anne'), ('University District', 'University District'), ('West Seattle', 'West Seattle')], max_length=64, null=True)),
                ('alias', models.TextField(blank=True, max_length=1024, null=True)),
                ('show_venue', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('latitude', 'longitude')},
            },
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('api_name', models.CharField(choices=[('AXS', 'AXS'), ('Bandsintown', 'Bandsintown'), ('Crawler - Blue Moon', 'Crawler - Blue Moon'), ("Crawler - Darrell's Tavern", "Crawler - Darrell's Tavern"), ('Crawler - Little Red Hen', 'Crawler - Little Red Hen'), ('Crawler - Sea Monster Lounge', 'Crawler - Sea Monster Lounge'), ('Crawler - Skylark', 'Crawler - Skylark'), ('Crawler - The Royal Room', 'Crawler - The Royal Room'), ('Dice', 'Dice'), ('Eventbrite', 'Eventbrite'), ('Manual', 'Manual'), ('Open Mic Generator', 'Open Mic Generator'), ('Songkick', 'Songkick'), ('Ticketmaster', 'Ticketmaster'), ('TIXR', 'TIXR'), ('Venuepilot', 'Venuepilot')], default='Manual', max_length=32)),
                ('event_api_id', models.CharField(max_length=64)),
                ('event_name', models.CharField(max_length=256)),
                ('venue_name', models.CharField(max_length=128)),
                ('event_day', models.DateField()),
                ('data', models.JSONField()),
                ('processed', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('api_name', 'event_api_id')},
            },
        ),
        migrations.CreateModel(
            name='OpenMic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('event_mic_type', models.CharField(choices=[('Open Jam', 'Open Jam'), ('Open Mic', 'Open Mic'), ('Show', 'Show')], default='Open Mic', max_length=32)),
                ('open_mic_type', models.CharField(choices=[('All', 'All'), ('Comedy', 'Comedy'), ('Music', 'Music'), ('Spoken Word', 'Spoken Word')], default='Music', max_length=16)),
                ('description', models.TextField()),
                ('signup_start_time', models.TimeField()),
                ('event_start_time', models.TimeField()),
                ('event_end_time', models.TimeField()),
                ('all_ages', models.BooleanField(default=False)),
                ('house_piano', models.BooleanField(default=False)),
                ('house_pa', models.BooleanField(default=True)),
                ('drums', models.BooleanField(default=False)),
                ('cadence_crontab', models.CharField(max_length=64)),
                ('cadence_readable', models.CharField(max_length=128)),
                ('generate_events', models.BooleanField(default=True)),
                ('venue', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.venue')),
            ],
        ),
        migrations.CreateModel(
            name='IngestionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('api_name', models.CharField(default='Manual', max_length=32)),
                ('change_type', models.CharField(choices=[('Create', 'Create'), ('Delete', 'Delete'), ('Error', 'Error'), ('NO OP', 'NO OP'), ('Skip', 'Skip'), ('Update', 'Update')], max_length=16)),
                ('change_log', models.TextField(blank=True, null=True)),
                ('ingestion_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.ingestionrun')),
                ('raw_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.rawdata')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=256)),
                ('event_day', models.DateField()),
                ('start_time', models.TimeField(blank=True, default=None, null=True)),
                ('event_url', models.CharField(blank=True, max_length=512, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('event_image_url', models.CharField(blank=True, max_length=1024, null=True)),
                ('event_image', models.ImageField(blank=True, null=True, upload_to='event_images')),
                ('event_type', models.CharField(choices=[('Open Jam', 'Open Jam'), ('Open Mic', 'Open Mic'), ('Show', 'Show')], default='Show', max_length=16)),
                ('signup_start_time', models.TimeField(blank=True, default=None, null=True)),
                ('show_event', models.BooleanField(default=True)),
                ('finalized', models.BooleanField(default=False)),
                ('artists', models.ManyToManyField(to='api.artist')),
                ('raw_datas', models.ManyToManyField(to='api.rawdata')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.venue')),
            ],
            options={
                'unique_together': {('venue', 'event_day', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='Crawler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('crawler_name', models.CharField(max_length=32, unique=True)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.venue')),
            ],
        ),
        migrations.CreateModel(
            name='CarpenterRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('api_name', models.CharField(default='Manual', max_length=32)),
                ('change_type', models.CharField(choices=[('Create', 'Create'), ('Delete', 'Delete'), ('Error', 'Error'), ('NO OP', 'NO OP'), ('Skip', 'Skip'), ('Update', 'Update')], max_length=16)),
                ('change_log', models.TextField(blank=True, null=True)),
                ('field_changed', models.CharField(choices=[('event', 'event'), ('venue', 'venue'), ('artist', 'artist'), ('none', 'none')], max_length=32)),
                ('artist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.artist')),
                ('carpenter_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.carpenterrun')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.event')),
                ('raw_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.rawdata')),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.venue')),
            ],
        ),
        migrations.CreateModel(
            name='VenueTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('venue_type', models.CharField(choices=[('Bar', 'Bar'), ('Brewery', 'Brewery'), ('Coffee Shop', 'Coffee Shop'), ('Event Space', 'Event Space'), ('Shop', 'Shop')], max_length=32)),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venue_tags', to='api.venue')),
            ],
            options={
                'unique_together': {('venue', 'venue_type')},
            },
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('platform', models.CharField(max_length=32)),
                ('url', models.CharField(max_length=128)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='api.artist')),
            ],
            options={
                'unique_together': {('artist', 'platform')},
            },
        ),
    ]
